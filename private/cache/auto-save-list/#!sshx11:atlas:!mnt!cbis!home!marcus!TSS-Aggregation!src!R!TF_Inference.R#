### Required for CLI input into Rscript
#!/usr/bin/env Rscript


### Import required libraries
suppressMessages({
  library("sleuth")
  library(here)
  library("aggregation")
  library(tidyverse)
  library(cowplot)
  library(GeneOverlap)
})

# ###### CHANGE THESE VARIABLES FOR NEW RUNS #######
model <- "PWM"
mapping_directory <- "../../data/processed_data/ensembl_GRCh38.94/500_100"
tss_window_file <- "TSS_windows_500_100.bed.gz"
results_filepath <- normalizePath(paste0(mapping_directory,"/sleuth"))
kallisto_directory <- "../../data/testing_data/PRJNA474526_SMAD3_siKD/results/"
expt_setup_file <- "../../data/testing_data/PRJNA474526_SMAD3_siKD/exptsetup.txt"
upstream=500
downstream=100
# ##################################################

####### FOR CLI RSCRIPT EXECUTION #######
CLI_arguments = commandArgs(trailingOnly=TRUE)

if (length(args) != 0) {
  model <- CLI_arguments[1]
  mapping_directory <- CLI_arguments[2]
  tss_window_file <- CLI_arguments[3]
  results_filepath <- CLI_arguments[4]
  kallisto_directory <- CLI_arguments[5]
  expt_setup_file <- CLI_arguments[6]
}
#########################################

## Transcripts to Transcription Start Site mappings

#mapping_directory <- paste0("processed_data/",basename(mapping_directory))

tx2tss_filepath <- file.path(mapping_directory,"sleuth","TSS_aggregation_table.tsv.gz")
tx2tss <- read_tsv(file=tx2tss_filepath)

### Set up sample to covariates table

# Generate Sample to Covariate table
#s2c <- read.table(expt_setup_file, header = TRUE, stringsAsFactors=FALSE)
s2c <- read_tsv(expt_setup_file)
s2c <- dplyr::mutate(s2c, path = paste0(kallisto_directory, sample))

### Sleuth (this can be moved ahead of the TF stuff)

## First to TSSs

## Set up Sleuth object
so_tss <- sleuth_prep(s2c, extra_bootstrap_summary=TRUE, target_mapping = tx2tss, aggregation_column = "TSS")

# Conduct various fits on Sleuth object
so_tss <- sleuth_fit(so_tss, ~condition, 'full')
so_tss <- sleuth_fit(so_tss, ~1, 'reduced')

# Conduct likelihood ratio test on fits
so_tss <- sleuth_lrt(so_tss, 'reduced', 'full')

# Results with p-values aggregated based on TSS_ID
TSS_agg_table <- sleuth_results(so_tss, 'reduced:full', 'lrt', show_all = FALSE, pval_aggregate = TRUE) %>%
  as_tibble %>%
  arrange(qval)

## Second to genes

## Set up Sleuth object. We have to drop the TSS-specific columns so there aren't duplicated rows in the results.

so_gene <- sleuth_prep(s2c, extra_bootstrap_summary=TRUE, target_mapping = select(tx2tss,-TSS), aggregation_column = "symbol")

# Conduct various fits on Sleuth object
so_gene <- sleuth_fit(so_gene, ~condition, 'full')
so_gene <- sleuth_fit(so_gene, ~1, 'reduced')

# Conduct likelihood ratio test on fits
so_gene <- sleuth_lrt(so_gene, 'reduced', 'full')

# Results with p-values aggregated based on GENE_ID
GENE_agg_table <- sleuth_results(so_gene, 'reduced:full', 'lrt', show_all = FALSE, pval_aggregate = TRUE) %>%
  as_tibble %>%
  arrange(qval)

### Lancaster

# Transcription Start Site to Transcription Factor mappings
tss2tf_filepath <- file.path(mapping_directory,"sleuth", paste0(model,"_TSS_to_TF_map.csv.gz"))
tss2tf <- read_csv(file=tss2tf_filepath) %>%
    dplyr::rename(target_id=TSS_ID, TF=TF)

### TSS to TF aggregation
# Attach TFs to TSS_ID p-value aggregated results table(sleuth_table)

aggregated_TSS_to_TF <-
    dplyr::left_join(TSS_agg_table, tss2tf) %>%
    group_by(TF) %>%
    nest() %>%
    arrange(TF) %>%
    mutate(pval=map_dbl(data,function(df) aggregation::lancaster(df$pval,df$sum_mean_obs_counts))) %>%
    mutate(padj=p.adjust(pval,method="bonferroni"),
           qval=p.adjust(pval,method="BH")) %>%
    select(-data)

aggregated_TSS_to_TF %>% arrange(padj)
aggregated_TSS_to_TF %>% arrange(padj) %>% head(20)
aggregated_TSS_to_TF %>% arrange(padj) %>% filter(TF == "SMAD3")


aggregated_GENE_to_TF <-
    inner_join(GENE_agg_table,tx2tss,by="gene_id") %>%
    inner_join(tss2tf,by=c("TSS"="target_id")) %>%
    select(-TSS,-target_id.y,-target_id.x) %>%
    distinct() %>%
    group_by(TF) %>%
    nest() %>%
    arrange(TF) %>%
    mutate(pval=map_dbl(data,function(df) aggregation::lancaster(df$pval,df$sum_mean_obs_counts))) %>%
    mutate(padj=p.adjust(pval,method="bonferroni"),
           qval=p.adjust(pval,method="BH")) %>%
    select(-data)

aggregated_GENE_to_TF %>% arrange(padj) %>% head(20)
aggregated_GENE_to_TF %>% arrange(padj) %>% filter(padj<0.05)


inner_join(aggregated_TSS_to_TF,aggregated_GENE_to_TF,by="TF") %>%
#    ggplot(aes(padj.x,padj.y)) +
    ggplot(aes(qval.x,qval.y)) +
    geom_point() +
    geom_abline(slope=1,intercept=0) +
    scale_x_log10() +
    scale_y_log10() +
    cowplot::theme_cowplot()

inner_join(aggregated_TSS_to_TF,aggregated_GENE_to_TF,by="TF") %>%
    filter(padj.x < padj.y)



inner_join(aggregated_TSS_to_TF,aggregated_GENE_to_TF,by="TF") %>%
    arrange(padj.y) %>% as.data.frame

aggregated_TSS_to_TF <- aggregated_TSS_to_TF %>% arrange(padj)
aggregated_GENE_to_TF <- aggregated_GENE_to_TF %>% arrange(padj)

write_tsv(aggregated_GENE_to_TF, file.path(results_filepath, paste0(model, "_lancaster_gene_to_TF.tsv")))
write_tsv(aggregated_TSS_to_TF, file.path(results_filepath, paste0(model, "_lancaster_TSS_to_TF.tsv")))

#### fgsea

library(fgsea)
TF_TSS_list <- dplyr::left_join(TSS_agg_table, tss2tf) %>%
    select(TF,target_id) %>%
    distinct %>%
    plyr::dlply(~ TF, function(df) df$target_id)

TF_GENE_list <-
    inner_join(GENE_agg_table,tx2tss,by="gene_id") %>%
    inner_join(tss2tf,by=c("TSS"="target_id")) %>%
    select(-TSS,-target_id.y,-target_id.x) %>%
    distinct() %>%
    plyr::dlply(~ TF, function(df) df$symbol)


TSS_ranks <- TSS_agg_table %>%
    select(target_id,pval,qval) %>%
    distinct %>%
    (function(df) rank(df$pval))

names(TSS_ranks) <- TSS_agg_table %>%
    select(target_id,pval,qval) %>%
    distinct %>%
    (function(df) df$target_id)

GENE_ranks <- GENE_agg_table %>%
    select(target_id,pval,qval) %>%
    distinct %>%
    (function(df) rank(df$pval))

names(GENE_ranks) <- GENE_agg_table %>%
    select(target_id,pval,qval) %>%
    distinct %>%
    (function(df) df$target_id)

fgseaTSS <- fgsea(TF_TSS_list,TSS_ranks, nperm=10000, maxSize=500,minSize   = 20)
topTF_TSS <- fgseaTSS[head(order(padj), n=10)][rev(order(NES)), pathway]

fgseaGENE <- fgsea(TF_GENE_list,GENE_ranks, nperm=10000, maxSize=500,minSize   = 20)
topTF_GENE <- fgseaGENE[head(order(padj), n=15)][rev(order(NES)), pathway]


dev.off()
plotGseaTable(TF_TSS_list[topTF_TSS], TSS_ranks,
              fgseaTSS,gseaParam   = 0.5)

dev.off()
plotGseaTable(TF_GENE_list[topTF_GENE], GENE_ranks,
              fgseaGENE,gseaParam   = 0.5)

pdf(height=4)
plotEnrichment(TF_TSS_list[["SMAD3"]],TSS_ranks) +
    cowplot::theme_cowplot() + ggtitle("SMAD3")
dev.off()

plotEnrichment(TF_GENE_list[["SMAD3"]],GENE_ranks) +
    cowplot::theme_cowplot() + ggtitle("SMAD2")

## Conclusion: lancaster is better than GSEA for this window size
## Maybe GSEA (ranked) is bad at TF enrichment because there are too many sites
library(GeneOverlap)
TSSgom <- newGOM(TF_TSS_list,
       list(q0.1=filter(TSS_agg_table,qval < 0.1) %>% pull(target_id),
            q0.2=filter(TSS_agg_table,qval < 0.2) %>% pull(target_id),
            q0.05=filter(TSS_agg_table,qval < 0.05) %>% pull(target_id)))

as_tibble(getMatrix(TSSgom),rownames='TF') %>%  arrange(q0.05) %>%
    write_tsv(file.path(results_filepath, paste0(model, "_GOM_TSS_to_TF.tsv")))


GENEgom <- newGOM(TF_GENE_list,
       list(q0.1=filter(GENE_agg_table,qval < 0.1) %>% pull(target_id),
            q0.2=filter(GENE_agg_table,qval < 0.2) %>% pull(target_id),
            q0.05=filter(GENE_agg_table,qval < 0.05) %>% pull(target_id)))

as_tibble(getMatrix(GENEgom),rownames='TF') %>%  arrange(q0.05) %>%
    write_tsv(file.path(results_filepath, paste0(model, "_GOM_gene_to_TF.tsv")))

as_tibble(getMatrix(GENEgom),rownames='TF') %>%  arrange(q0.05)
